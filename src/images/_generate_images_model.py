"""
Generates the images model containing the embedded images from this folder.
Images are taken from: https://www.iconsdb.com
Color: #325c81
"""

import base64
import os


_OUTPUT_FILENAME = '../models/image_data.py'
_IMAGE_EXTENSIONS = ['.png']
_MAX_LINE_LENGTH = 100
_INDENT_WIDTH = 4


def generate_image_data():
    names = []
    with open(_OUTPUT_FILENAME, 'w') as fp_model:
        fp_model.write('"""\n')
        fp_model.write('This file is automatically generated by the images/_generate_image_data.py script.\n')
        fp_model.write('"""\n\n')
        fp_model.write('from wx.lib.embeddedimage import PyEmbeddedImage\n\n\n')
        fp_model.write('class ImageData(object):\n')

        for item in os.listdir('.'):
            parts = os.path.splitext(item)
            if parts[1] in _IMAGE_EXTENSIONS:
                name = parts[0]
                assert name not in names, 'The name {} already exists'.format(name)
                names.append(name)
                with open(item, 'rb') as fp_image:
                    content = base64.b64encode(fp_image.read())
                data_indent = len(name) + _INDENT_WIDTH * 2 - 1
                fp_model.write('\n    {} = PyEmbeddedImage(\n'.format(name))
                max_data_length = _MAX_LINE_LENGTH - data_indent - _INDENT_WIDTH * 2 - 1
                while len(content) > max_data_length:
                    fp_model.write('{}{}\n'.format(' ' * (data_indent + 4), content[:max_data_length]))
                    content = content[max_data_length:]
                if len(content) > 0:
                    fp_model.write('{}{}\n'.format(' ' * (data_indent + 4), content))
                fp_model.write('{})\n'.format(' ' * data_indent))

        fp_model.write("\n\nif __name__ == '__main__':\n\n")
        fp_model.write('    import wx\n\n')
        fp_model.write('    _app = wx.App(redirect=False)\n\n')
        for name in names:
            fp_model.write('    print(ImageData.{}.Bitmap)\n'.format(name))


if __name__ == '__main__':

    generate_image_data()
