"""
Generates the images model containing the embedded images from this folder.
Images are taken from: https://www.iconsdb.com
Color: #325c81
"""

import base64
import os


_OUTPUT_FILENAME = '../models/image_data.py'
_IMAGE_EXTENSIONS = ['.png']
_MAX_LINE_LENGTH = 100
_INDENT_WIDTH = 4


def generate_image_data():
    names = []
    with open(_OUTPUT_FILENAME, "w", encoding="utf-8") as fp_model:
        fp_model.write('"""\n')
        fp_model.write("This file is automatically generated by the "
                       "images/_generate_image_data.py script.\n")
        fp_model.write('"""\n\n')
        fp_model.write("from wx.lib.embeddedimage import PyEmbeddedImage\n\n\n")
        fp_model.write("class ImageData:\n")

        for item in os.listdir("."):
            parts = os.path.splitext(item)
            if parts[1] in _IMAGE_EXTENSIONS:
                name = parts[0]
                assert name not in names, f"The name '{name}' already exists"
                names.append(name)
                with open(item, "rb") as fp_image:
                    content = base64.b64encode(fp_image.read())
                fp_model.write(f"\n    {name} = PyEmbeddedImage(\n")
                indent = _INDENT_WIDTH * 2
                max_data_length = _MAX_LINE_LENGTH - indent - 3     # 3 character for b''
                while len(content) > max_data_length:
                    fp_model.write(f"{" " * indent}{content[:max_data_length]}\n")
                    content = content[max_data_length:]
                if len(content) > 0:
                    fp_model.write(f"{" " * indent}{content}\n")
                indent -= 4
                fp_model.write(f"{" " * indent})\n")

        fp_model.write('\n\nif __name__ == "__main__":\n\n')
        fp_model.write("    import pylint\n")
        fp_model.write("    from tests.unit_tests.test_models.test_image_data "
                       "import TestImageData\n\n")
        fp_model.write("    TestImageData().run(True)\n")
        fp_model.write("    pylint.run_pylint([__file__])\n")


if __name__ == "__main__":

    import pylint

    print("Generate image data")
    generate_image_data()
    print("Done\n")

    # We must import after generating the model.
    # If the model contains errors, we can always generate a new one.
    from tests.unit_tests.test_models.test_image_data import TestImageData

    TestImageData().run(True)
    pylint.run_pylint([__file__])
